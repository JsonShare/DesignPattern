/**
 * 抽象构件角色： 抽象的组件对象，为组合中的对象声明接口，实现接口的缺省行为
 */
public abstract class Component {
  /**
   * 向组合对象中加入组件对象
   * @param child 被加入组合对象中的组件对象
   */
  public void add(Component child) {
     // 缺省的实现，抛出例外，因为叶子对象没有这个功能，
     //或者子组件没有实现这个功能
     throw new UnsupportedOperationException("对象不支持这个功能");
  }
  
  /**
   * 从组合对象中移出某个组件对象
   * @param child 被移出的组件对象
   */
  public void remove(Component child) {
     // 缺省的实现，抛出例外，因为叶子对象没有这个功能，
     //或者子组件没有实现这个功能
     throw new UnsupportedOperationException("对象不支持这个功能");
  }
  
  /**
   * 返回某个索引对应的组件对象
   * @param index 需要获取的组件对象的索引，索引从0开始
   * @return 索引对应的组件对象
   */
  public Component getChild(int index) {
     // 缺省的实现，抛出例外，因为叶子对象没有这个功能，
     //或者子组件没有实现这个功能
     throw new UnsupportedOperationException("对象不支持这个功能");
  }
  
  /**
   * 示意方法，子组件对象可能有的功能方法
   */
  public abstract void operation();
}

/**
 * 容器构件：组合对象，通常需要存储子对象，定义有子部件的部件行为，并实现在Component里面定义的与子部件有关的操作
 */
public class Composite extends Component {
  /**
   * 用来存储组合对象中包含的子组件对象
   */
  private List<Component> childComponents = null;

  public void add(Component child) {
     //延迟初始化
     if (childComponents == null) {
         childComponents = new ArrayList<Component>();
     }
     childComponents.add(child);
  }
  
  public void remove(Component child) {
      if (childComponents != null) {
         childComponents.remove(child);
      }
  }
  
  public Component getChild(int index) {
     if (childComponents != null){
         if(index>=0 && index<childComponents.size()){
            return childComponents.get(index);
         }
     }
     return null;
  }
  
  /**
   * 示意方法，通常在里面需要实现递归的调用
   */
  public void operation() {     
     if (childComponents != null){
         for(Component c : childComponents){
            //递归的进行子组件相应方法的调用
            c.operation();
         }
     }
  }
}

/**
* 叶子构件：叶子对象，叶子对象不再包含其它子对象
*/
public class Leaf extends Component {
  /**
   * 示意方法，叶子对象可能有自己的功能方法
   */
  public void operation() {
     // do something
  }
}