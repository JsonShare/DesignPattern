/**
* 抽象职责类
*/
public abstract class Handler {
	/**
	* 持有后继的职责对象
	*/
	protected Handler successor;
	/**
	* 设置后继的职责对象
	* @param successor 后继的职责对象
	*/
	public void setSuccessor(Handler successor) {
		this.successor = successor;
	}
	/**
	* 示意处理请求的方法，虽然这个示意方法是没有传入参数，
	* 但实际是可以传入参数的，根据具体需要来选择是否传递参数
	*/
	public abstract void handleRequest();
}

/**
* 具体的职责对象，用来处理请求
*/
public class ConcreteHandlerA extends Handler {
	public void handleRequest() {
		//根据某些条件来判断是否属于自己处理的职责范围
		//判断条件比如：从外部传入的参数，或者这里主动去获取的外部数据，
		//如从数据库中获取等，下面这句话只是个示意
		boolean someCondition = false;
		
		if(someCondition){
			//如果属于自己处理的职责范围，就在这里处理请求
			//具体的处理代码
			System.out.println("ConcreteHandlerA handle request");
		}else{
			//如果不属于自己处理的职责范围，那就判断是否还有后继的职责对象
			//如果有，就转发请求给后继的职责对象
			//如果没有，什么都不做，自然结束
			if(this.successor!=null){
				this.successor.handleRequest();
			}
		}
	}
}

/**
* 具体的职责对象，用来处理请求
*/
public class ConcreteHandlerB extends Handler {
	public void handleRequest() {
		//根据某些条件来判断是否属于自己处理的职责范围
		//判断条件比如：从外部传入的参数，或者这里主动去获取的外部数据，
		//如从数据库中获取等，下面这句话只是个示意
		boolean someCondition = false;
		
		if(someCondition){
			//如果属于自己处理的职责范围，就在这里处理请求
			//具体的处理代码
			System.out.println("ConcreteHandlerB handle request");
		}else{
			//如果不属于自己处理的职责范围，那就判断是否还有后继的职责对象
			//如果有，就转发请求给后继的职责对象
			//如果没有，什么都不做，自然结束
			if(this.successor!=null){
				this.successor.handleRequest();
			}
		}
	}
}

/**
* 职责链的客户端，这里只是个示意
*/
public class Client {
	public static void main(String[] args) {
		//先要组装职责链
		Handler h1 = new ConcreteHandlerA();
		Handler h2 = new ConcreteHandlerB();

		h1.setSuccessor(h2);    
		//然后提交请求
		h1.handleRequest();
	}
}